<?xml version="1.0"?>
<rdf:RDF
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:foaf="http://xmlns.com/foaf/0.1/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns="http://purl.org/rss/1.0/"
>
<channel rdf:about="http://planet.python.org/">
	<title>Planet Python</title>
	<link>http://planet.python.org/</link>
	<description>Planet Python - http://planet.python.org/</description>

	<items>
		<rdf:Seq>
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-8935780327334775165.post-5793283199636061453" />
			<rdf:li rdf:resource="http://blog.showmedo.com/?p=336" />
			<rdf:li rdf:resource="http://www.myelin.co.nz/post/2008/7/14/#200807141" />
			<rdf:li rdf:resource="http://blog.enthought.com/?p=45" />
			<rdf:li rdf:resource="http://del.icio.us/steve.holden#2008-07-13" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-3971202189709462152.post-2255727845041197411" />
			<rdf:li rdf:resource="http://nedbatchelder.com/blog/200807/encouragement_from_unlikely_places.html" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-11683713.post-736398615950414880" />
			<rdf:li rdf:resource="http://jtauber.com/blog/2008/07/13/iphone_3g_first_impressions" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-8671476328661520656.post-371850195453384442" />
			<rdf:li rdf:resource="http://pyre.third-bit.com/blog/archives/1662.html" />
			<rdf:li rdf:resource="http://blog.snaplogic.org/?p=207" />
			<rdf:li rdf:resource="http://www.traceback.org/2008/07/13/pyohio-2008-registration-is-now-open/" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-3971202189709462152.post-7503072572107631526" />
			<rdf:li rdf:resource="http://del.icio.us/steve.holden#2008-07-12" />
			<rdf:li rdf:resource="http://www.blueskyonmars.com/2008/07/12/twitter-updates-for-2008-07-12/" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-496482.post-8364750980349323522" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-5843977256413530490.post-874491044031943610" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-5843977256413530490.post-1320934547341084259" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-5440028356946346379.post-7781723122437054056" />
			<rdf:li rdf:resource="http://www.willmcgugan.com/2008/07/12/food-file-on-ubuntu/" />
			<rdf:li rdf:resource="http://nedbatchelder.com/blog/200807/gas_station_tv.html" />
			<rdf:li rdf:resource="http://www.peterbe.com/plog/python-new-style-classes-and-super" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-3971202189709462152.post-1265543049596913506" />
			<rdf:li rdf:resource="http://www.blueskyonmars.com/2008/07/12/links-for-2008-07-12/" />
		</rdf:Seq>
	</items>
</channel>

<item rdf:about="http://entitycrisis.blogspot.com/2008/07/what-rocks.html">
	<title>Simon Wittber: What Rocks?</title>
	<link>http://entitycrisis.blogspot.com/2008/07/what-rocks.html</link>
	<content:encoded>Owning and running a public site (&lt;a href=&quot;http://gamejam.org/&quot;&gt;gamejam.org&lt;/a&gt;) which people are actually (almost) using.&lt;br /&gt;&lt;br /&gt;I've spent a week of spare time hours building and adding features, which has been quite refreshing. In my day job(s), I need to worry about lots of problems which simply don't exist on a simple site designed to serve a few hundred people.&lt;br /&gt;&lt;br /&gt;So far, I've implemented these features:&lt;br /&gt;&lt;br /&gt; - Signup / Verification by email&lt;br /&gt; - Diary / Twitter style microblog system&lt;br /&gt; - Atom feeds&lt;br /&gt; - Etag caching (only used for non-authenticated clients)&lt;br /&gt; - Chat system&lt;br /&gt; - Screenshots&lt;br /&gt; - Team creation, invites&lt;br /&gt; - Polls, comments &lt;br /&gt; - Member profiles&lt;br /&gt;&lt;br /&gt;I'm planning to add a trust graph, file uploads and... whatever else pops into my head. I don't know where this burst of development energy has come from, but I hope it lasts.</content:encoded>
	<dc:date>2008-07-14T08:41:00+00:00</dc:date>
</item>
<item rdf:about="http://blog.showmedo.com/2008/07/14/what-does-python-look-like-series-finished-in-club-showmedo/">
	<title>ShowMeDo: “What does Python look like?” series finished in Club ShowMeDo</title>
	<link>http://blog.showmedo.com/2008/07/14/what-does-python-look-like-series-finished-in-club-showmedo/</link>
	<content:encoded>&lt;p&gt;The recent Python Beginners series named &lt;a href=&quot;http://showmedo.com/videos/series?name=kmNu2xcp3&quot;&gt;What Does Python Look Like?&lt;/a&gt; is finished, all 6 episodes are up.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;#8220;Thank you for this resource.  I appreciate your efforts to help others.&amp;#8221;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Here&amp;#8217;s the layout for the series:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://showmedo.com/videos/video?name=2750000&amp;amp;fromSeriesID=275&quot;&gt;3 Minute Oveview (What Does Python Look Like?) (Free)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://showmedo.com/videos/video?name=2750010&amp;amp;fromSeriesID=275&quot;&gt;Variables and Naming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://showmedo.com/videos/video?name=2750020&amp;amp;fromSeriesID=275&quot;&gt;Write and Run (and Unit Tests), No Compiling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://showmedo.com/videos/video?name=2750030&amp;amp;fromSeriesID=275&quot;&gt;Indentation and Colons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://showmedo.com/videos/video?name=2750040&amp;amp;fromSeriesID=275&quot;&gt;Loops and Conditions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://showmedo.com/videos/video?name=2750050&amp;amp;fromSeriesID=275&quot;&gt;Functions and Classes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This series is a part of &lt;a href=&quot;http://showmedo.com/club&quot;&gt;Club ShowMeDo&lt;/a&gt;, these screencasts are available to paying subscribers  (or for free if you author a video for us).&lt;/p&gt;
&lt;p&gt;The club videos form a subset of our 311 &lt;a href=&quot;http://showmedo.com/videos/python&quot;&gt;Python screencasts&lt;/a&gt;, many of the Python screencasts are produced by our open-source authors who like to share their skills.&lt;/p&gt;
&lt;p&gt;Other recent &lt;a href=&quot;http://showmedo.com/club&quot;&gt;Club&lt;/a&gt; videos include &lt;a href=&quot;http://showmedo.com/videos/series?name=iNiVCfz5B&quot;&gt;Database Programming&lt;/a&gt;, &lt;a href=&quot;http://showmedo.com/videos/series?name=FtBpzKiWL&quot;&gt;Google App Engine&lt;/a&gt; and &lt;a href=&quot;http://showmedo.com/videos/series?name=KTN7wMXVN&quot;&gt;pyWin32&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2008-07-14T08:37:35+00:00</dc:date>
</item>
<item rdf:about="http://www.myelin.co.nz/post/2008/7/14/#200807141">
	<title>Second p0st: ZooKeeper: pretty much exactly what I was looking for</title>
	<link>http://www.myelin.co.nz/post/2008/7/14/#200807141</link>
	<content:encoded>&lt;p&gt;After &lt;a href=&quot;http://www.myelin.co.nz/post/2008/7/7/#200807072&quot;&gt;writing about wanting a replicated versioned database for storing host configuration information&lt;/a&gt; the other day, I found out about &lt;a href=&quot;http://zookeeper.sourceforge.net/&quot;&gt;ZooKeeper&lt;/a&gt;, from Yahoo! Research.  I'm fairly sure that it's what I was looking for.  I've been playing with it today and all looks good so far.
&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://developer.yahoo.com/blogs/hadoop/2008/03/intro-to-zookeeper-video.html&quot;&gt;Here's a blog post about it with some more details&lt;/a&gt;.  Basically it's a distributed versioned object store with a few tricks (the ability to set 'ephemeral' nodes, which disappear when you disconnect, and nodes with serial numbers) that let you implement locks, barriers and queues.
&lt;/p&gt;

&lt;p&gt;The Java process that's been running it all afternoon has used 7 s of CPU time so far and is showing an RSZ of 16704 kB, so it looks like it scales down well - that's comparable to a Python or Ruby process.
&lt;/p&gt;


&lt;p&gt;&lt;a href=&quot;http://www.myelin.co.nz/post/comments?u=2&amp;amp;p=200807141&amp;amp;link=http://www.myelin.co.nz/post/2008/7/14/#200807141&quot; title=&quot;Click here to comment on this post.&quot;&gt;Comment&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2008-07-14T07:25:29+00:00</dc:date>
</item>
<item rdf:about="http://blog.enthought.com/?p=45">
	<title>Enthought: grin 1.1</title>
	<link>http://blog.enthought.com/?p=45</link>
	<content:encoded>&lt;p&gt;I am pleased to announce the first release of &lt;a href=&quot;http://pypi.python.org/pypi/grin&quot;&gt;grin&lt;/a&gt;. Colleagues and a few other interested parties have been pleasantly using the tool for a while now, but this is the first time it has been announced properly.&lt;/p&gt;
&lt;p&gt;I wrote &lt;a href=&quot;http://pypi.python.org/pypi/grin&quot;&gt;grin&lt;/a&gt; to help me search directories full of source code. The venerable&lt;br /&gt;
GNU &lt;a href=&quot;http://www.gnu.org/software/grep&quot;&gt;grep&lt;/a&gt; and &lt;a href=&quot;http://www.gnu.org/software/findutils&quot;&gt;find&lt;/a&gt; are great tools, but they fall just a little short for my&lt;br /&gt;
normal use cases.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://pypi.python.org/pypi/grin&quot;&gt;grin&lt;/a&gt; does exactly what I want 99% of the time with the least amount of thinking: recursive grep that skips crud I&amp;#8217;m almost never interested in. For example, many of the projects I work on use Subversion as source control. Copies of the unmodified files are stored in the directory .svn/text-base/. When doing a typical recursive grep, say for a particular import I’m trying to remove from my code, grep will search these files too and find all kinds of false positives.&lt;/p&gt;
&lt;p&gt;Now, one could construct a find command that would do the equivalent and store it away as little oneliner shell script, but that&amp;#8217;s boring. I’m a coder, and this is an excuse to code up something fun and useful. If I’m going to use a tool 50 times a day, I might as well make it do exactly what I want. This also gives me an opportunity to make a library module of a featureful grepalike that can be repurposed to make any number of small, specific tools. But before we get to that, let’s take a look at some typical examples of using grin at the command line.&lt;/p&gt;
&lt;p&gt;To recursively search the current directory for a regex:&lt;/p&gt;
&lt;pre&gt;
$ grin some_regex
&lt;/pre&gt;
&lt;p&gt;To search an explicit set of files:&lt;/p&gt;
&lt;pre&gt;
$ grin some_regex file1.txt path/to/file2.txt
&lt;/pre&gt;
&lt;p&gt;To search data piped to stdin:&lt;/p&gt;
&lt;pre&gt;
$ cat somefile | grin some_regex -
&lt;/pre&gt;
&lt;p&gt;To only search Python .py files:&lt;/p&gt;
&lt;pre&gt;
$ grin -I &amp;quot;*.py&amp;quot; some_regex
&lt;/pre&gt;
&lt;p&gt;To just show the names of the files that contain matches rather than the matches&lt;br /&gt;
themselves:&lt;/p&gt;
&lt;pre&gt;
$ grin -l some_regex
&lt;/pre&gt;
&lt;p&gt;Match highlighting was a feature added by my colleague Peter Wang. He took care to only use ANSI color escapes when they would be interpreted correctly. If you are piping the output to a file or a pager, you typically don&amp;#8217;t want the ANSI escape sequences in there. But if you need to explicitly suppress the use of color highlighting:&lt;/p&gt;
&lt;pre&gt;
$ grin --no-color some_regex
&lt;/pre&gt;
&lt;p&gt;To force the use of color highlighting when piping the output to something that&lt;br /&gt;
is capable of understanding ANSI color escapes:&lt;/p&gt;
&lt;pre&gt;
$ grin --force-color some_regex | less -R
&lt;/pre&gt;
&lt;p&gt;To avoid recursing into directories named either CVS or RCS:&lt;/p&gt;
&lt;pre&gt;
$ grin -d CVS,RCS some_regex
&lt;/pre&gt;
&lt;p&gt;By default grin skips a large number of files. To suppress all of this behavior&lt;br /&gt;
and search everything:&lt;/p&gt;
&lt;pre&gt;
$ grin -sbSDE some_regex
&lt;/pre&gt;
&lt;p&gt;To use another program to determine the list of files to search, you have two options. The most common is to pass it on the command line using your shell’s backtick mechanism:&lt;/p&gt;
&lt;pre&gt;
$ grin some_regex `find . -newer some_file.txt`
&lt;/pre&gt;
&lt;p&gt;But this fails, sometimes. My shells typically break up arguments on whitespace, so if you have directories with spaces in them, grin will get busted paths. &lt;a href=&quot;http://en.wikipedia.org/wiki/Xargs&quot;&gt;xargs&lt;/a&gt; helps, but I can never remember how to use it without reading the man page. Instead, grin can read the list of paths to search from a file, one path per line.&lt;/p&gt;
&lt;pre&gt;
$ find . -newer some_file.txt | grin -f - some_regex
&lt;/pre&gt;
&lt;p&gt;If you have embedded &lt;em&gt;newlines&lt;/em&gt; in your directory names&amp;hellip;you have my sympathy. Fortunately, you also have an option to use embedded NULs as the separator. But mostly sympathy.&lt;/p&gt;
&lt;pre&gt;
$ find . -newer some_file.txt -print0 | grin -0 -f - some_regex
&lt;/pre&gt;
&lt;p&gt;Now let’s talk about libraries. I tried to write grin with a clean design such that people could reuse pieces of it and shim in custom behavior in useful places. Want to search text files inside ZIP files? Just replace the generator that recurses through the paths with one that recurses into ZIP files and provide a function that will make an a filelike object for the ZIPped files. We can grep through texty-but-not-actual-plaintext files with the appropriate converters, too. For example, &lt;a href=&quot;http://pybrary.net/pyPdf/&quot;&gt;pyPdf&lt;/a&gt; is a nice library for reading and munging PDF files. It can extract the plain text from many PDF files. If you write a function that will do this and return a StringIO with the extracted text, grin will search through the plain text of PDFs.&lt;/p&gt;
&lt;p&gt;I am also considering more exotic uses, too. For example, let’s say that I want to find all instances of a particular import in my Python code. There are a number of variations on the syntax for importing a package.&lt;/p&gt;
&lt;pre&gt;
import foo.bar
from foo import bar
from foo import baz, bar
from foo import 
    bar
from foo import (baz,
    bar)
# Plus comments that tell you to do &quot;from foo import bar&quot;
&lt;/pre&gt;
&lt;p&gt;As an example included in the source tarball, I wrote up a little script that will use the &lt;a href=&quot;http://docs.python.org/dev/library/compiler&quot;&gt;compiler&lt;/a&gt; module to parse Python files, extract just the import statements, and normalize them so they are easily searchable. Let’s say I have the following Python file:&lt;/p&gt;
&lt;pre&gt;
$ cat example.py
import foo
import foo.baz as blah
from foo import bar, baz as bat

def somefunction():
    &quot;Do something to foo.baz&quot;
    import from_inside.function
&lt;/pre&gt;
&lt;p&gt;We can look at just the normalization by searching for &amp;#8220;import&amp;#8221; since that will show up on every line:&lt;/p&gt;
&lt;pre&gt;
$ grinimports.py import example.py
example.py:
    1 : import foo
    2 : import foo.baz as blah
    3 : from foo import bar
    4 : from foo import baz as bat
    5 : import from_inside.function
&lt;/pre&gt;
&lt;p&gt;To look for just the imports of foo.baz, a fairly simple regex can find all of them in the normalized output:&lt;/p&gt;
&lt;pre&gt;
$ grinimports.py &quot;import foo.baz|from foo import baz&quot; example.py
example.py:
    2 : import foo.baz as blah
    4 : from foo import baz as bat
&lt;/pre&gt;
&lt;p&gt;The script that implements this is small. Outside of the code that implements the normalization and help text, it just recapitulates grin&amp;#8217;s main() function with small modifications. There are more possibilities along these lines, of course. A grin that just searches docstrings and comments? Or reformats paragraphs to be on a single line so you can search for phrases that happen to be broken by a newline? Or search through the wiki pages in Trac’s relational database? I’d like to hear about what you think you can do with &lt;a href=&quot;http://pypi.python.org/pypi/grin&quot;&gt;grin&lt;/a&gt;. Leave a comment here or &lt;a href=&quot;mailto:robert.kern@enthought.com&quot;&gt;send me email&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://pypi.python.org/pypi/grin&quot;&gt;grin&lt;/a&gt; can be downloaded from its PyPI page or checked out from Subversion:&lt;/p&gt;
&lt;pre&gt;
$ svn co &lt;a href=&quot;https://svn.enthought.com/svn/sandbox/grin/trunk&quot;&gt;https://svn.enthought.com/svn/sandbox/grin/trunk&lt;/a&gt; grin
&lt;/pre&gt;
&lt;p&gt;If you have &lt;a href=&quot;http://peak.telecommunity.com/DevCenter/setuptools&quot;&gt;setuptools&lt;/a&gt;, you may also easy_install it:&lt;/p&gt;
&lt;pre&gt;
$ easy_install grin
&lt;/pre&gt;
&lt;p&gt;The &lt;a href=&quot;http://www.enthought.com/products/epd.php&quot;&gt;Enthought Python Distribution&lt;/a&gt; currently has version 1.0 of grin, which is only missing one or two features compared to 1.1.&lt;/p&gt;</content:encoded>
	<dc:date>2008-07-14T07:01:03+00:00</dc:date>
</item>
<item rdf:about="http://del.icio.us/steve.holden#2008-07-13">
	<title>Steve Holden: Links for 2008-07-13 [del.icio.us]</title>
	<link>http://del.icio.us/steve.holden#2008-07-13</link>
	<content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://chrisguillebeau.com/3x5/files/2008/06/worlddomination.pdf&quot;&gt;A Brief Guide to World Domination&lt;/a&gt;&lt;br /&gt;
Interesting take on achieving your ambitions. Worth reading.&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
	<dc:date>2008-07-14T05:00:00+00:00</dc:date>
</item>
<item rdf:about="http://feeds.feedburner.com/~r/PyPyStatusBlog/~3/334937837/europython-2008-pypy-talks-and-sprint.html">
	<title>PyPy Development: Europython 2008 PyPy talks and sprint sum up</title>
	<link>http://feeds.feedburner.com/~r/PyPyStatusBlog/~3/334937837/europython-2008-pypy-talks-and-sprint.html</link>
	<content:encoded>The EuroPython 2008 conference and sprints have finished - it certainly was 
a very eventful and successful conference for PyPy.  And many very interesting 
non-PyPy talks as well.  PyPy presentations are available online: &lt;a href=&quot;http://codespeak.net/svn/pypy/extradoc/talk/ep2008/status.pdf&quot;&gt;PyPy status talk&lt;/a&gt;
&lt;a href=&quot;http://codespeak.net/svn/pypy/extradoc/talk/ep2008/Pypy_for_the_rest_of_us.odp&quot;&gt;PyPy for the rest of us&lt;/a&gt;, &lt;a href=&quot;http://codespeak.net/pypy/extradoc/talk/ep2008/ep2008-talk-behind-the-scenes.html&quot;&gt;PyPy behind the scenes&lt;/a&gt;.  Armin and Maciej also did a well-attended 
talk about PyPy's garbage collection, but that was quite interactive, no slides. 
&lt;br /&gt;&lt;br /&gt;
The talks were all well visited and we got good questions.  however, we still 
need to work on sorting out the &quot;PyPy technology cloud&quot; and how to present
it to different audiences.  Anyway, we are happy to hear feedback or questions
about the talks!
&lt;br /&gt;&lt;br /&gt;
After the conference there was a three-day PyPy sprint. Despite 
the fact that most PyPy core developers were &lt;a href=&quot;http://en.wikipedia.org/wiki/Zombies_in_popular_culture&quot;&gt;zombies&lt;/a&gt;, 
we made good progress.  Partcularly our newcomers did very well.  
Here are some results: 
&lt;ul&gt;
&lt;li&gt; itertools rewritten in RPython for performance by Jakub
  Gustak and Andrew Durdin &lt;/li&gt;

&lt;li&gt; a new ctypes based dbm and hashlib module, both by Gasper Zejn 
  with support from Henrik Vendelbo, they also got ctypes to nicely work on OSX. (sorry for lack of proper letters in names :)&lt;/li&gt;

&lt;li&gt; implement builtin function call profiling by Stephan Diehl, Antonio and Armin. &lt;/li&gt;

&lt;li&gt; &lt;a href=&quot;http://morepypy.blogspot.com/2008/07/pypys-python-runs-pinax-django.html&quot;&gt;running
  Pinax on top of pypy-c&lt;/a&gt;, by Henrik, Holger, Gasper. &lt;/li&gt;

&lt;li&gt; Jim Baker started a _rawffi.py for Jython using JNA aiming
  to provide support to run PyPy's ctypes on top of Jython. 
  When Jython gets this to run, PyPy's JVM backend should be 
  able to use it. Talk about &lt;a href=&quot;http://morepypy.blogspot.com/2008/07/ep2008-pypy-meets-jython.html&quot;&gt;Code Reuse&lt;/a&gt; :) &lt;/li&gt;

&lt;li&gt; oldstyle classes are now the default, this makes 
  PyPy mimick very closely cpython's 2.5 object model. &lt;/li&gt;

&lt;li&gt; Andrew started a port of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Malbolge&quot;&gt;Malbolge&lt;/a&gt; 
  interpreter written in Python to RPython (obviously the only missing 
  link for PyPy to take over the world). &lt;/li&gt;

&lt;li&gt; various cleanups (a new option &quot;--lonepycfiles&quot; helps with
  saner imports, remove int-float comparison shortcuts, ...) &lt;/li&gt;
&lt;/ul&gt;
At the end of the sprint we also discussed &lt;a href=&quot;http://codespeak.net/pypy/extradoc/planning/1.1/plan.txt&quot;&gt;initial plans for a 1.1 release&lt;/a&gt; which we'd like to make happen this year.   So we are generally looking forward to a busy rest of 2008 and luckily this starts by many of us taking a good vacation first :) &lt;br /&gt;&lt;br /&gt;

Cheers,&lt;br /&gt;
fijal &amp;amp; holger&lt;img src=&quot;http://feeds.feedburner.com/~r/PyPyStatusBlog/~4/334937837&quot; height=&quot;1&quot; width=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2008-07-14T02:44:48+00:00</dc:date>
</item>
<item rdf:about="http://nedbatchelder.com/blog/200807/encouragement_from_unlikely_places.html">
	<title>Ned Batchelder's blog: Encouragement from unlikely places</title>
	<link>http://nedbatchelder.com/blog/200807/encouragement_from_unlikely_places.html</link>
	<content:encoded>&lt;p&gt;Here's a sweet story about a Pixar fan who teared up at the original WALL-E
trailer: &lt;a class=&quot;offsite&quot; href=&quot;http://www.cinematical.com/2008/07/02/pixar-honors-the-girl-who-cried-at-the-wall-e-teaser/&quot;&gt;Pixar
Honors the Girl Who Cried at the 'WALL-E' Teaser&lt;/a&gt;.  I like a few things about
this story. The original video is simple but heartfelt, showing a genuine
reaction to the trailer.  The story of Pixar flying Courtney in for the wrap
party is terrific.  But the part I liked best was what Andrew Stanton said
about her:
&lt;/p&gt;&lt;blockquote&gt;&lt;div&gt;&lt;p&gt;Six months ago, when the first trailer for WALL-E came out, we were
only halfway done with the film, and we weren't exactly sure how we were going
to get it done. We were exhausted. And then, one day, a movie showed up on
YouTube showing a girl watching the trailer for WALL-E. And every time she
watched it, she would cry on cue. When we saw that, we knew we were on the right
track.&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;p&gt;I've never made a motion picture, but I know what it is like to fix onto one
particular customer and use them as a proxy for all of them.  Making a movie
I imagine can become pretty removed from the simple question of how people will
react to the film.  When the Pixar people saw Courtney's strong reaction to WALL-E's
character design, it was a huge boost for them.  They had heard from their customer,
and the response was positive.  What more encouragement do you need?&lt;/p&gt;</content:encoded>
	<dc:date>2008-07-14T00:30:46+00:00</dc:date>
</item>
<item rdf:about="http://spyced.blogspot.com/2008/07/how-to-tell-when-youre-successful.html">
	<title>Spyced: How to tell when you're successful</title>
	<link>http://spyced.blogspot.com/2008/07/how-to-tell-when-youre-successful.html</link>
	<content:encoded>&lt;p&gt;You're successful when someone tries to get a cheap clone of &lt;a href=&quot;http://www.carnageblender.com&quot;&gt;your site&lt;/a&gt; done on a cheap-labor code monkey site.&lt;/p&gt;&lt;p&gt;I'm &lt;a href=&quot;http://www.getacoder.com/projects/carnage_blender_clone_71413.html&quot;&gt;flattered&lt;/a&gt;, I think.  (Although I'd be &lt;em&gt;more&lt;/em&gt; flattered if it were a &lt;em&gt;good&lt;/em&gt; code monkey site.)&lt;/p&gt;</content:encoded>
	<dc:date>2008-07-13T22:58:36+00:00</dc:date>
</item>
<item rdf:about="http://jtauber.com/blog/2008/07/13/iphone_3g_first_impressions/">
	<title>James Tauber: iPhone 3G First Impressions</title>
	<link>http://jtauber.com/blog/2008/07/13/iphone_3g_first_impressions/</link>
	<content:encoded>&lt;p&gt;I stood in line on Friday to upgrade to an iPhone 3G. It took about 2.5 hrs to get to the front of the line but the process after that was very easy because I was already an AT&amp;amp;T customer.
&lt;/p&gt;
&lt;p&gt;
By the time I'd left the store, my old iPhone no longer worked as a phone.
&lt;/p&gt;
&lt;p&gt;
The iPhone 3G felt funny at first but I've gotten used to it now. I think actually prefer the feel of it in my hand but it did take a day or two to get to that point. The screen also felt rougher initially but that might have just been some temporary coating and it now feels just as smooth as my old iPhone.
&lt;/p&gt;
&lt;p&gt;
I immediately downloaded Monkey Ball. The accelerometer-based controls are harder to get used to than they looked in the demos. I've also bought the &lt;a class=&quot;external&quot; href=&quot;http://www.culturedcode.com/things/&quot;&gt;Things&lt;/a&gt; app and look forward to when it supports synchronization with the desktop version.
&lt;/p&gt;
&lt;p&gt;
The App Store experience itself was pretty impressive. It is pretty amazing sitting at the airport, deciding you want a new app and buying, downloading, installing and using it right there and then.
&lt;/p&gt;
&lt;p&gt;
The GPS worked nicely in conjunction with Google Maps when my girlfriend and I were going to pick up a pizza last night.
&lt;/p&gt;
&lt;p&gt;
I haven't really done much data stuff over 3G yet as I'm on wireless when at home so can't really comment on how much faster it is. Certainly the signal I get in my apartment isn't any better which is unfortunate.
&lt;/p&gt;
&lt;p&gt;
I haven't played around with the Mobile Me integration yet.
&lt;/p&gt;
&lt;p&gt;
I'll be configuring Exchange support tomorrow at work, so I'll report how that goes.
&lt;/p&gt;
&lt;p&gt;
Overall: the original iPhone was so impressive, getting the new phone was somewhat anti-climactic in comparison. If you don't have an iPhone, the 3G version will be at least as impressive as the original was a year ago. If you do have an iPhone already, the value obviously depends on how important 3G and GPS are to you.&lt;/p&gt;</content:encoded>
	<dc:date>2008-07-13T20:05:54+00:00</dc:date>
</item>
<item rdf:about="http://pybites.blogspot.com/2008/07/learning-django.html">
	<title>Benjamin Peterson: Learning Django</title>
	<link>http://pybites.blogspot.com/2008/07/learning-django.html</link>
	<content:encoded>Quite honestly, I haven't done any web programming since I quit PHP. I do hear a lot of about all those Python web frameworks, so when I saw a link to the &lt;a href=&quot;http://djangobook.com&quot;&gt;Django Book&lt;/a&gt;, I took the initiative and started reading. I haven't tried out any other frameworks, but my initial reaction is to love Django. It's obviously well designed around DRY and the Zen and very well documented. Django models are beautiful and makes SQL very painless.&lt;br /&gt;&lt;br /&gt;Having worked through the examples in the book, I've started conceiving a larger project. I'd like to make my personal homepage. Obviously, it would have a lot of static content, and I want to do that in the clearest way possible. So, I'll steal a hint from the django docs: write my site in reST and dynamically generate the webpage with docutils. (It will be a good exercise with caching.) In fact, I have a version running locally.&lt;br /&gt;&lt;br /&gt;[My first lazyweb query:] Where can I get good Python hosting? I'll need to upload Django, too because I'm running off SVN. Can it be gotten cheap or even for free?&lt;br /&gt;&lt;br /&gt;BTW, I'm now aggregated on &lt;a href=&quot;http://planet.python.org&quot;&gt;Planet Python&lt;/a&gt;!</content:encoded>
	<dc:date>2008-07-13T21:00:09+00:00</dc:date>
</item>
<item rdf:about="http://pyre.third-bit.com/blog/archives/1662.html">
	<title>Greg Wilson: If You Were a Professional Musician…</title>
	<link>http://pyre.third-bit.com/blog/archives/1662.html</link>
	<content:encoded>&lt;p&gt;&amp;#8230;you&amp;#8217;d probably know the names of a lot of up-and-coming bands&amp;#8212;it would be part of your job.  If you&amp;#8217;re reading this blog, though, it&amp;#8217;s more likely that you&amp;#8217;re planning a career in high tech, so it&amp;#8217;s fair to ask: how many up-and-coming companies in your area can you name?  Backbone Magazine has just posted their &lt;a href=&quot;http://backbonemag.com/Web2/default.asp&quot;&gt;PICK 20 list&lt;/a&gt;; I know thirteen of them, and as soon as this post is finished, I&amp;#8217;m going to have a look at the other seven.&lt;/p&gt;</content:encoded>
	<dc:date>2008-07-13T19:27:39+00:00</dc:date>
</item>
<item rdf:about="http://blog.snaplogic.org/?p=207">
	<title>SnapLogic: EuroPython 2008, Day 3</title>
	<link>http://blog.snaplogic.org/?p=207</link>
	<content:encoded>&lt;div class=&quot;document&quot; id=&quot;europython-2008-day-3&quot;&gt;
&lt;p&gt;Day 3 of EuroPython continued with the same intensity as the previous two
days. The talks I attended on Wednesday were:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Jussi Rasinmaki&amp;#8217;s talk on &lt;a class=&quot;reference external&quot; href=&quot;http://registration.europython.eu/talk_abstracts.html#29&quot;&gt;use the batteries&lt;/a&gt; included&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A great &amp;#8221;Python in Action&amp;#8221; advocacy talk on leveraging Python in a real
application for forest management.&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Beatrice During and Holger Krekel&amp;#8217;s update on  &lt;a class=&quot;reference external&quot; href=&quot;http://registration.europython.eu/talk_abstracts.html#56&quot;&gt;PyPy - Behind the scenes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This session was a summary of the current and planned PyPy activities and
roadmap. The part that really caught my attention (apart from the PyPy activity
itself) was the level of EU government s ponsorship and funding of open source
development. We really don&amp;#8217;t see that in the US. Or, maybe I just haven&amp;#8217;t been
looking&amp;#8230;.&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Mike Cariaso&amp;#8217;s talk on &lt;a class=&quot;reference external&quot; href=&quot;http://registration.europython.eu/talk_abstracts.html#2&quot;&gt;Python in the Amazon Cloud&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mike is using Amazon EC2 with Python to perform compute intensive DNA analysis.
He has developed &lt;a class=&quot;reference external&quot; href=&quot;http://www.runblast.com/&quot;&gt;runblast&lt;/a&gt; to make EC2 more accessible to ordinary humans.
The talk also went into some cool details about SNPedia and promethease.&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Andreas Schreiber&amp;#8217;s talk on &lt;a class=&quot;reference external&quot; href=&quot;http://registration.europython.eu/talk_abstracts.html#11&quot;&gt;DataFinder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Andreas described the problems at DLR with managing large scientific datasets.
They looked at commercial data management systems, and found them to be
expensive and top heavy with useless features.Also the tools uses proprietary
or unusable scripting functionality. As a result, they decided to build their
own. They develped a prototype in Java, but had problems with platform support
(write once, debug everywhere ? )  However, the users liked the embedded Jython
capabilities in the original protptype and requested a Python solution.  This
resulted in a final implementation using Python.  Key reasons for using Python
at DLR were : easy to learn, rapid development, inherently maintainable.&lt;/p&gt;
&lt;p&gt;The last block of sessions for the day was the only time in the conference
wehre I really had trouble making a decision betwwen talks.  I opted for Jack
Diederich&amp;#8217;s &lt;a class=&quot;reference external&quot; href=&quot;http://registration.europython.eu/talk_abstracts.html#3&quot;&gt;Class Decorators: Radically Simple&lt;/a&gt;, which meant I missed Gasper
Zejn&amp;#8217;s  &lt;a class=&quot;reference external&quot; href=&quot;http://registration.europython.eu/talk_abstracts.html#4&quot;&gt;Managing Computing Clouds on Unreliable Nodes with Python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As for class decorators, it&amp;#8217;s just one more reason for me to start using
Python 2.6 / 3.0. Jack wrote the reference implementation for &lt;a class=&quot;reference external&quot; href=&quot;http://www.python.org/dev/peps/pep-3129/&quot;&gt;PEP3129&lt;/a&gt;, and this
talk really did radically simplify the use cases for class decorators.&lt;/p&gt;
&lt;p&gt;The Lightning talks for Wednesday covered a lot of ground and, as usual, I
learned a few new tricks.&lt;/p&gt;
&lt;p&gt;One library I never knew about was Stefan Swarzer&amp;#8217;s &lt;a class=&quot;reference external&quot; href=&quot;http://ftputil.sschwarzer.net/trac&quot;&gt;ftputil&lt;/a&gt;, which implements
a high level API for ftp.  This is essentially a virtual filesystem which
implements os and os.path functionality.&lt;/p&gt;
&lt;p&gt;There was also a lightning talk on using Restructured Text and docutils to
generate &lt;a class=&quot;reference external&quot; href=&quot;http://meyerweb.com/eric/tools/s5/&quot;&gt;S5&lt;/a&gt; presentations.  I started using this tool chain a couple of months
ago, and I&amp;#8217;m really beginning to like it. One text file can generate slides and
printed documentation which work in any web browser. It&amp;#8217;s really useful for
notes, tutorials, and other basic presentations. This is not really the tool
for slick, animated, whiz bang stuff, but I rarely do those type of
presentations.&lt;/p&gt;
&lt;p&gt;Inspired by Hans Rosling&amp;#8217;s keynote, I also did a lightning talk on &lt;a class=&quot;reference external&quot; href=&quot;https://www.snaplogic.org/presentations/public_data.html&quot;&gt;public data&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After three days, I have concluded that the EuroPython community is really not
all that different to the community in the US (despite comments I&amp;#8217;ve heard to
the contrary.)&lt;/p&gt;
&lt;p&gt;The EuroPython conference had fewer Django specific users than PyCon, but there
was definitely a surge in Django related attendance at PyCon 2008. That affect
might continue next year at Euro Python (which will be in Birmingham, UK.) On
the other hand, there were way more Zope/Plone developers at EuroPython.  It&amp;#8217;s
not clear to me whether this is because Zope is more popular in Europe, or
because there&amp;#8217;s more overlap of the communities Europe.  I suspect its a
combination of both.&lt;/p&gt;
&lt;p&gt;EuroPython 2008 was definitely worth the trip.&lt;/p&gt;
&lt;/div&gt;</content:encoded>
	<dc:date>2008-07-13T16:37:23+00:00</dc:date>
</item>
<item rdf:about="http://www.traceback.org/2008/07/13/pyohio-2008-registration-is-now-open/">
	<title>David Stanek: PyOhio 2008 Registration Is Now Open</title>
	<link>http://www.traceback.org/2008/07/13/pyohio-2008-registration-is-now-open/</link>
	<content:encoded>&lt;p&gt;PyOhio is a daylong miniconference for Python programmers in and around Ohio. It will be held Saturday, July 26, 2008 from 9:00 to 6:00 at the &lt;a href=&quot;http://columbuslibrary.org/&quot;&gt;Columbus Metropolitan Library&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We have some great &lt;a href=&quot;http://wiki.python.org/moin/PyOhio/Talks&quot;&gt;talks&lt;/a&gt; scheduled. We are also planning on having &lt;a href=&quot;http://wiki.python.org/moin/PyOhio/LightningTalks&quot;&gt;Lightning Talks&lt;/a&gt;, &lt;a href=&quot;http://wiki.python.org/moin/PyOhio/OpenSpaces&quot;&gt;Open Spaces&lt;/a&gt; and a &lt;a href=&quot;http://wiki.python.org/moin/PyOhio/LightningTalks&quot;&gt;Poster Session&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Did I mention that it is &lt;a href=&quot;http://en.wikipedia.org/wiki/Gratis_versus_Libre&quot;&gt;free as in beer&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;You can register by going to &lt;a href=&quot;http://www.pyohio.org/reg/register/&quot;&gt;http://www.pyohio.org/reg/register/&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;sociable&quot;&gt;
&lt;span class=&quot;sociable_tagline&quot;&gt;
&lt;strong&gt;Share and Enjoy:&lt;/strong&gt;
	&lt;span&gt;These icons link to social bookmarking sites where readers can share and discover new web pages.&lt;/span&gt;
&lt;/span&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://digg.com/submit?phase=2&amp;amp;url=http%3A%2F%2Fwww.traceback.org%2F2008%2F07%2F13%2Fpyohio-2008-registration-is-now-open%2F&amp;amp;title=PyOhio+2008+Registration+Is+Now+Open&quot; title=&quot;Digg&quot;&gt;&lt;img src=&quot;http://www.traceback.org/wp-content/plugins/sociable/images/digg.png&quot; title=&quot;Digg&quot; alt=&quot;Digg&quot; class=&quot;sociable-hovers&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://del.icio.us/post?url=http%3A%2F%2Fwww.traceback.org%2F2008%2F07%2F13%2Fpyohio-2008-registration-is-now-open%2F&amp;amp;title=PyOhio+2008+Registration+Is+Now+Open&quot; title=&quot;del.icio.us&quot;&gt;&lt;img src=&quot;http://www.traceback.org/wp-content/plugins/sociable/images/delicious.png&quot; title=&quot;del.icio.us&quot; alt=&quot;del.icio.us&quot; class=&quot;sociable-hovers&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://reddit.com/submit?url=http%3A%2F%2Fwww.traceback.org%2F2008%2F07%2F13%2Fpyohio-2008-registration-is-now-open%2F&amp;amp;title=PyOhio+2008+Registration+Is+Now+Open&quot; title=&quot;Reddit&quot;&gt;&lt;img src=&quot;http://www.traceback.org/wp-content/plugins/sociable/images/reddit.png&quot; title=&quot;Reddit&quot; alt=&quot;Reddit&quot; class=&quot;sociable-hovers&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://technorati.com/faves?add=http%3A%2F%2Fwww.traceback.org%2F2008%2F07%2F13%2Fpyohio-2008-registration-is-now-open%2F&quot; title=&quot;Technorati&quot;&gt;&lt;img src=&quot;http://www.traceback.org/wp-content/plugins/sociable/images/technorati.png&quot; title=&quot;Technorati&quot; alt=&quot;Technorati&quot; class=&quot;sociable-hovers&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded>
	<dc:date>2008-07-13T12:06:31+00:00</dc:date>
</item>
<item rdf:about="http://feeds.feedburner.com/~r/PyPyStatusBlog/~3/334339283/finding-bugs-in-pypy-with-fuz.html">
	<title>PyPy Development: Finding Bugs in PyPy with a Fuz</title>
	<link>http://feeds.feedburner.com/~r/PyPyStatusBlog/~3/334339283/finding-bugs-in-pypy-with-fuz.html</link>
	<content:encoded>&lt;p&gt;Last week I played a bit with &lt;a class=&quot;reference&quot; href=&quot;http://fusil.hachoir.org/trac&quot;&gt;Fusil&lt;/a&gt;, which is a &lt;a class=&quot;reference&quot; href=&quot;http://en.wikipedia.org/wiki/Fuzz_testing&quot;&gt;fuzzing&lt;/a&gt; framework.  The idea is
to feed the interpreter code that calls the functions of a module with random values
of various types as arguments in the hope that one hits an unchecked case. This is
done until a problem is hit , the most common problem being a segfault.  Victor Stinner,
the author of Fusil, is a regular in the PyPy IRC channel and thankfully helped me
getting started with Fusil. I used his project description for CPython as a starting
point and tweaked it a bit.  Reason is that PyPy is harder to segfault and so
I tweaked Fusil to also count uncaught RPython-level exceptions as such a problem.
(RPython has full exception support, and if an RPython-exception escapes to the top
level, the Python interpreter aborts.  One should not be able to exploit this but
but for a user it is bad enough, because such exceptions cannot be caught from
Python code.)&lt;/p&gt;
&lt;p&gt;Using Fusil I found a number of cases where such exceptions happened (in some
pickle support-code, in the expat parser, in the &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;os&lt;/span&gt;&lt;/tt&gt; and in the &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;termios&lt;/span&gt;&lt;/tt&gt;
module) and also one or two segfaults (in the parser module, of all places).
I fixed all these problems so that by
now the fuzzer just runs for a very long time and only finds things that take
too long (so they count as a way to do a DoS attack) like
&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;pow(12355123123L,&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;12351512123121L)&lt;/span&gt;&lt;/tt&gt; or &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;round(1,&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;1000000000)&lt;/span&gt;&lt;/tt&gt; (the latter
should probably be fixed). This probably just means that the fuzzer is not good
enough, because there are certainly segfaults left in PyPy. However, the fact
that it is rather hard to find them validates our approach of using a
high-level memory-managed language for our interpreter. Victor tells me that it
is rather easy to find segfaults in CPython this way, he already found &lt;a class=&quot;reference&quot; href=&quot;http://bugs.python.org/issue?%40search_text=&amp;amp;title=&amp;amp;%40columns=title&amp;amp;id=&amp;amp;%40columns=id&amp;amp;creation=&amp;amp;creator=haypo&amp;amp;activity=2008-07-06&amp;amp;%40columns=activity&amp;amp;%40sort=activity&amp;amp;actor=&amp;amp;nosy=&amp;amp;type=&amp;amp;components=&amp;amp;versions=&amp;amp;dependencies=&amp;amp;assignee=&amp;amp;keywords=&amp;amp;priority=&amp;amp;%40group=priority&amp;amp;status=1&amp;amp;%40columns=status&amp;amp;resolution=&amp;amp;%40pagesize=50&amp;amp;%40startwith=0&amp;amp;%40queryname=&amp;amp;%40old-queryname=&amp;amp;%40action=search&quot;&gt;quite
some problems&lt;/a&gt;.&lt;/p&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/PyPyStatusBlog/~4/334339283&quot; height=&quot;1&quot; width=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2008-07-13T09:55:44+00:00</dc:date>
</item>
<item rdf:about="http://del.icio.us/steve.holden#2008-07-12">
	<title>Steve Holden: Links for 2008-07-12 [del.icio.us]</title>
	<link>http://del.icio.us/steve.holden#2008-07-12</link>
	<content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://holdenweb.blogspot.com/2008/07/pypy-continues-to-catch-up.html&quot;&gt;For Some Value of &amp;quot;Magic&amp;quot;: PyPy Continues to Catch Up&lt;/a&gt;&lt;br /&gt;
The PyPy team are making Django do interesting things -- another interesting compatibilty demonstration&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
	<dc:date>2008-07-13T05:00:00+00:00</dc:date>
</item>
<item rdf:about="http://www.blueskyonmars.com/2008/07/12/twitter-updates-for-2008-07-12/">
	<title>Kevin Dangoor: Twitter Updates for 2008-07-12</title>
	<link>http://www.blueskyonmars.com/2008/07/12/twitter-updates-for-2008-07-12/</link>
	<content:encoded>&lt;ul class=&quot;aktt_tweet_digest&quot;&gt;
&lt;li&gt;Aqua Forest is a very nifty iPhone game. &lt;a href=&quot;http://twitter.com/dangoor/statuses/856463161&quot;&gt;#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;@cleverdevil agreed. Newsgator on the web is faster. &lt;a href=&quot;http://twitter.com/dangoor/statuses/856597784&quot;&gt;#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;aktt_credit&quot;&gt;Powered by &lt;a href=&quot;http://alexking.org/projects/wordpress&quot;&gt;Twitter Tools&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharethis.com/item?&amp;amp;wp=2.5.1&amp;amp;publisher=4c75e961-1ece-4620-a912-84dd6eb72e2f&amp;amp;title=Twitter+Updates+for+2008-07-12&amp;amp;url=http%3A%2F%2Fwww.blueskyonmars.com%2F2008%2F07%2F12%2Ftwitter-updates-for-2008-07-12%2F&quot;&gt;ShareThis&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2008-07-13T03:59:59+00:00</dc:date>
</item>
<item rdf:about="http://holdenweb.blogspot.com/2008/07/pypy-continues-to-catch-up.html">
	<title>Steve Holden: PyPy Continues to Catch Up</title>
	<link>http://holdenweb.blogspot.com/2008/07/pypy-continues-to-catch-up.html</link>
	<content:encoded>Interesting &lt;a href=&quot;http://morepypy.blogspot.com/2008/07/pypys-python-runs-pinax-django.html&quot;&gt;news from the EuroPython sprints&lt;/a&gt; at Vilnius via Holger Krekel. &lt;a href=&quot;http://codespeak.net/pypy/dist/pypy/doc/home.html&quot;&gt;PyPy&lt;/a&gt; supports &lt;a href=&quot;http://djangoproject.com/&quot;&gt;Django&lt;/a&gt; well enough to run the &lt;a href=&quot;http://pinax.hotcluboffrance.com/&quot;&gt;Pinax&lt;/a&gt; application put together by an open source team coordinated by James Tauber. It's great to see Python expanding in so many directions at once. The future is definitelyto be interesting.&lt;br /&gt;&lt;br /&gt;Django seems to be becoming one of the &quot;how good is your implementation&quot; tests for Python implementations. Not only are the PyPy team using it in this way, but &lt;a href=&quot;http://www.codeplex.com/IronPython&quot;&gt;IronPython&lt;/a&gt; and &lt;a href=&quot;http://www.jython.org/Project/&quot;&gt;Jython&lt;/a&gt; are as well. Since Jython is now in alpha with a Python 2.5-compatible implementation the picture is looking better and better every day.&lt;br /&gt;&lt;br /&gt;The one thing nobody has discussed much is the attitude of the PyPy, Jython and IronPython development teams to migration towards Python 3.0. Does it represent the next wave, or will it end up as an isolated development?&lt;div class=&quot;feedflare&quot;&gt;
&lt;a href=&quot;http://feeds.feedburner.com/~f/ForSomeValueOfMagic?a=vYeOZJ&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~f/ForSomeValueOfMagic?i=vYeOZJ&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~f/ForSomeValueOfMagic?a=YI5V9j&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~f/ForSomeValueOfMagic?i=YI5V9j&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;</content:encoded>
	<dc:date>2008-07-12T22:34:44+00:00</dc:date>
</item>
<item rdf:about="http://techarttiki.blogspot.com/2008/02/first.html">
	<title>Adam Pletcher: First</title>
	<link>http://techarttiki.blogspot.com/2008/02/first.html</link>
	<content:encoded>After a few seconds of intense analysis, I concluded the world needs exactly one more blog. I doubt I'll post to this much, but I hope what I do post will be useful or interesting to some.

I'll try not to impress you with details on the great burrito place I found during lunch, why I think X or Y sucks, or post mildly amusing YouTube links.

This blog is focused on technical art for videogame development. Hope you dig it.</content:encoded>
	<dc:date>2008-07-12T22:31:02+00:00</dc:date>
</item>
<item rdf:about="http://techarttiki.blogspot.com/2008/03/calling-python-from-maxscript.html">
	<title>Adam Pletcher: Calling Python from MaxScript</title>
	<link>http://techarttiki.blogspot.com/2008/03/calling-python-from-maxscript.html</link>
	<content:encoded>Unlike Maya, 3ds Max does not have internal support for Python.  But that shouldn't stop you from calling useful Python code in your MaxScripts!  Here's the basics of how to do that using COM.&lt;br /&gt;&lt;br /&gt;COM is a Windows system that supports, among other arcane things, interprocess communication.  You can use a language like Python, Visual Basic, or C to define a COM &quot;server&quot;.  This is a class or function, defined by a unique identifier (GUID) and a name.  Here's some &lt;a href=&quot;http://en.wikipedia.org/wiki/Component_Object_Model&quot;&gt;gory details on COM&lt;/a&gt; if you're curious.&lt;br /&gt;&lt;br /&gt;Here's a simple COM server using Python:&lt;br /&gt;&lt;i&gt;Requires the &lt;a href=&quot;http://python.net/crew/mhammond/win32/&quot;&gt;Python Win32 Extensions&lt;/a&gt; (which no TA should be without)&lt;/i&gt;&lt;br /&gt;&lt;pre name=&quot;code&quot; class=&quot;python&quot;&gt;# A simple Python COM server.&lt;br /&gt;class PythonComUtilities:&lt;br /&gt;   # These tell win32 what/how to register with COM&lt;br /&gt;   _public_methods_ = ['checksumMD5']&lt;br /&gt;   _reg_progid_ = 'PythonCom.Utilities'&lt;br /&gt;   # Class ID must be new/unique for every server you create&lt;br /&gt;   _reg_clsid_ = '{48dd4b8f-f35e-11dc-a4fd-0013029ef248}'&lt;br /&gt;&lt;br /&gt;   def checksumMD5(self, string):&lt;br /&gt;      &quot;&quot;&quot;Creates MD5 checksum from string&quot;&quot;&quot;&lt;br /&gt;      import md5&lt;br /&gt;      m = md5.new()&lt;br /&gt;      m.update(str(string))&lt;br /&gt;      return m.hexdigest()&lt;br /&gt;&lt;br /&gt;if (__name__ == '__main__'):&lt;br /&gt;   print 'Registering COM server...'&lt;br /&gt;   import win32com.server.register as comReg&lt;br /&gt;   comReg.UseCommandLine(PythonComUtilities)&lt;/pre&gt;This defines a function, &lt;code&gt;checksumMD5&lt;/code&gt; that takes a string as input, and returns the MD5 checksum for that string.&lt;br /&gt;&lt;br /&gt;To register the COM server on a PC, simply run the Python script.  Windows records it in registry, noting which script/application it uses.&lt;br /&gt;&lt;br /&gt;Now that's done, another application (3ds Max, in this case) can connect to that COM server's interface and call it like any other function.  Here's an example of doing that from MaxScript:&lt;br /&gt;&lt;pre name=&quot;code&quot; class=&quot;maxscript&quot;&gt;&lt;br /&gt;-- Connect to the COM server by name&lt;br /&gt;comObj = createOLEObject &quot;PythonCom.Utilities&quot;&lt;br /&gt;-- Call the function it exposes, with a sample string&lt;br /&gt;checksum = comObj.checksumMD5 &quot;The quick brown fox.&quot;&lt;br /&gt;&lt;/pre&gt;It's that simple.  The checkum value returned for our sample string is &lt;code&gt;&quot;2e87284d245c2aae1c74fa4c50a74c77&quot;&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;You might be wondering what a checksum is, or what it's good for.  Stay tuned and I'll show you some slick stuff you can do with them in 3ds Max.&lt;br /&gt;&lt;br /&gt;&lt;i&gt;Python COM server example adapted from code appearing in &lt;/i&gt;&lt;a href=&quot;http://www.oreilly.com/catalog/pythonwin32/&quot;&gt;Python Programming in Win32&lt;/a&gt;&lt;i&gt; by Mark Hammond and Andy Robinson... a great book for getting more out of Windows with Python.&lt;/i&gt;</content:encoded>
	<dc:date>2008-07-12T22:07:08+00:00</dc:date>
</item>
<item rdf:about="http://blog.doughellmann.com/2008/07/pyworks-conference-blog.html">
	<title>Doug Hellmann: PyWorks conference blog</title>
	<link>http://blog.doughellmann.com/2008/07/pyworks-conference-blog.html</link>
	<content:encoded>&lt;a href=&quot;http://pyworks.mtacon.com/&quot;&gt;&lt;img src=&quot;http://pyworks.mtacon.com/img/pyworks/template/logo.png&quot; align=&quot;right&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;As I've previously mentioned MTA, publishers of Python Magazine, has announced the &lt;a href=&quot;http://pyworks.mtacon.com/&quot;&gt;PyWorks&lt;/a&gt; conference to be held in Atlanta, GA on November 12-14, 2008.&lt;br /&gt;&lt;br /&gt;We've started a blog so anyone interested in the conference can keep up with announcements.  If you think you might want to attend or present at the conference, &lt;a href=&quot;http://blog.mtacon.com/2008/07/why-two-conferences.html&quot;&gt;check it out!&lt;/a&gt;</content:encoded>
	<dc:date>2008-07-12T20:41:57+00:00</dc:date>
</item>
<item rdf:about="http://www.willmcgugan.com/2008/07/12/food-file-on-ubuntu/">
	<title>Will McGugan: Food File on Ubuntu</title>
	<link>http://www.willmcgugan.com/2008/07/12/food-file-on-ubuntu/</link>
	<content:encoded>&lt;p&gt;Since I&amp;#8217;ve moved to Linux as my primary desktop (I know, about time), I&amp;#8217;ve been motivated in porting some of my old software. This shouldn&amp;#8217;t be too difficult, since I try to work in as platform agnostic manner as possible, and when I do use a platform specific API I keep it nice and modular. &lt;a href=&quot;http://www.kelpiesoft.com/applib/foodfile/&quot;&gt;Food File&lt;/a&gt; is probably the most popular app I ever created, although only since I made it free. As a commercial app, it didn&amp;#8217;t do to well, probably because it didn&amp;#8217;t get noticed amongst all the diet / food applications for Windows out there, or possibly because I am lousy at marketing.&lt;/p&gt;
&lt;p&gt;Food File on linux seems like a good fit, because it is a free wxPython interface to a publicly available data source (&lt;a href=&quot;http://www.nal.usda.gov/fnic/foodcomp/search/&quot;&gt;USDA Nutrient Database&lt;/a&gt;). I was hoping it would run without modification, but it failed on a line that used Windows-style back-slashes in paths rather than forward slashses &amp;#8212; as prefered by linux. After changing 4 such lines, it ran. I was surprised that the fancy OpenGL graphics didn&amp;#8217;t cause any problems, but it did segfault on the About box, the simplest dialog in the entire app (go figure). I haven&amp;#8217;t got to the bottom of that yet, but when I do, I will release a Linux version. Here&amp;#8217;s a screenshot of Food File running under Ubuntu:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/billowycoat/2661343758/&quot; title=&quot;Screenshot by Billowycoat, on Flickr&quot;&gt;&lt;img src=&quot;http://farm4.static.flickr.com/3282/2661343758_5b645ebc93_m.jpg&quot; alt=&quot;Screenshot&quot; width=&quot;240&quot; height=&quot;192&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t have any experience building a Linux package. If the &lt;em&gt;lazyweb&lt;/em&gt; would like to help me with that, it would be appreciated!&lt;/p&gt;
&lt;p&gt;I think it was this project that started my &lt;a href=&quot;http://www.willmcgugan.com/2008/06/29/pretty-as-pie/&quot;&gt;pie chart fetish&lt;/a&gt;. I wonder if there is a support group or something&amp;#8230;&lt;/p&gt;</content:encoded>
	<dc:date>2008-07-12T15:22:39+00:00</dc:date>
</item>
<item rdf:about="http://nedbatchelder.com/blog/200807/gas_station_tv.html">
	<title>Ned Batchelder's blog: Gas station tv</title>
	<link>http://nedbatchelder.com/blog/200807/gas_station_tv.html</link>
	<content:encoded>&lt;p&gt;The latest step in our march toward all advertising all the time is
&lt;a class=&quot;offsite&quot; href=&quot;http://www.gstv.com/&quot;&gt;Gas Station TV&lt;/a&gt;, which consists of screens on
top of gas pumps, blaring news, weather, and ads.  These remind me of the screens
in elevators, pestering us for the few minutes it takes to ride to our floor.
&lt;/p&gt;&lt;p&gt;I understand the economic forces driving these micro-channels of ad-laced info-bits.
What I don't understand is why they have to be limited to news headlines and weather
forcasts.  If the information is only there to engage our interest, why not branch
out?  What about classic paintings?  What about cartoons from the New Yorker?
How about poetry?  Opening paragraphs from random Wikipedia articles?  With so
much content flowing all over the net, why are we forced to see the same news,
stocks, sports, and weather all the time?&lt;/p&gt;</content:encoded>
	<dc:date>2008-07-12T14:57:59+00:00</dc:date>
</item>
<item rdf:about="http://www.peterbe.com/plog/python-new-style-classes-and-super">
	<title>Peter Bengtsson: Python new-style classes and the super() function</title>
	<link>http://www.peterbe.com/plog/python-new-style-classes-and-super</link>
	<content:encoded>&lt;p&gt;I've never really understood the impact of new-style Python classes and what it means to your syntax until now. With new-style classes you can use the &lt;code&gt;super()&lt;/code&gt; builtin, otherwise you can't. This works for new-style classes:
&lt;br /&gt;&lt;div class=&quot;my_code_default&quot;&gt;&amp;nbsp;&lt;span class=&quot;p_43&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;p_31&quot;&gt;Farm&lt;/span&gt;&lt;span class=&quot;p_38&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p_36&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p_38&quot;&gt;):&lt;/span&gt;
&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;p_43&quot;&gt;def&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;p_35&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p_38&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p_36&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p_38&quot;&gt;):&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;p_43&quot;&gt;pass&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&lt;span class=&quot;p_43&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;p_31&quot;&gt;Barn&lt;/span&gt;&lt;span class=&quot;p_38&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p_36&quot;&gt;Farm&lt;/span&gt;&lt;span class=&quot;p_38&quot;&gt;):&lt;/span&gt;
&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;p_43&quot;&gt;def&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;p_35&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p_38&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p_36&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p_38&quot;&gt;):&lt;/span&gt;
&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;p_36&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p_38&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p_36&quot;&gt;Barn&lt;/span&gt;&lt;span class=&quot;p_38&quot;&gt;,&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;p_36&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p_38&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;p_36&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p_38&quot;&gt;()&lt;/span&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;If you want to do the same for old-style classes you simply can't use &lt;code&gt;super()&lt;/code&gt; so you'll have to do this:
&lt;br /&gt;&lt;div class=&quot;my_code_default&quot;&gt;&amp;nbsp;&lt;span class=&quot;p_43&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;p_31&quot;&gt;Farm&lt;/span&gt;&lt;span class=&quot;p_38&quot;&gt;:&lt;/span&gt;
&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;p_43&quot;&gt;def&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;p_35&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p_38&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p_36&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p_38&quot;&gt;):&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;p_43&quot;&gt;pass&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&lt;span class=&quot;p_43&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;p_31&quot;&gt;Barn&lt;/span&gt;&lt;span class=&quot;p_38&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p_36&quot;&gt;Farm&lt;/span&gt;&lt;span class=&quot;p_38&quot;&gt;):&lt;/span&gt;
&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;p_43&quot;&gt;def&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;p_35&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p_38&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p_36&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p_38&quot;&gt;):&lt;/span&gt;
&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;p_36&quot;&gt;Farm&lt;/span&gt;&lt;span class=&quot;p_38&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p_36&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p_38&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p_36&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p_38&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Strange that I've never realised this before. The reason I did now was that I had to back-port some code into Zope 2.7 which doesn't support setting security on new-style classes. &lt;/p&gt;
&lt;p&gt;Now I need to do some &lt;a href=&quot;http://www.geocities.com/foetsch/python/new_style_classes.htm&quot;&gt;reading on new-style classes&lt;/a&gt; because clearly I haven't understood it all. &lt;/p&gt;</content:encoded>
	<dc:date>2008-07-12T13:00:00+00:00</dc:date>
</item>
<item rdf:about="http://feeds.feedburner.com/~r/PyPyStatusBlog/~3/333667486/pypys-python-runs-pinax-django.html">
	<title>PyPy Development: PyPy's Python runs Pinax / Django</title>
	<link>http://feeds.feedburner.com/~r/PyPyStatusBlog/~3/333667486/pypys-python-runs-pinax-django.html</link>
	<content:encoded>During the EP2008 sprint we got &lt;a href=&quot;http://pinax.hotcluboffrance.com/&quot;&gt;Pinax&lt;/a&gt; running on top of PyPy. At &lt;a href=&quot;http://play1.pypy.org:7788&quot;&gt;our play1 server we have it running on top of pypy-c&lt;/a&gt;.  Not that you'll notice many differences to the original site but that's the point, isn't it? ... Well, in fact i am too lazy to customize our play1 version now - i rather spent a nice evening with the other sprint guys :) 

Pinax integrates numerous reusable &lt;a href=&quot;http://djangoproject.com&quot;&gt;Django&lt;/a&gt; apps to take care of the things that many sites have in common. Many thanks particularly to Henrik Vendelbo who sorted out various Pinax and PyPy issues, and wrote up a nice &lt;a href=&quot;http://code.djangoproject.com/wiki/DjangoAndPyPy&quot;&gt;DjangoAndPyPy wiki page&lt;/a&gt; describing the installation process.

greetings from Vilnius (Lithunia), Holger&lt;img src=&quot;http://feeds.feedburner.com/~r/PyPyStatusBlog/~4/333667486&quot; height=&quot;1&quot; width=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2008-07-12T11:39:53+00:00</dc:date>
</item>
<item rdf:about="http://www.blueskyonmars.com/2008/07/12/links-for-2008-07-12/">
	<title>Kevin Dangoor: links for 2008-07-12</title>
	<link>http://www.blueskyonmars.com/2008/07/12/links-for-2008-07-12/</link>
	<content:encoded>&lt;ul class=&quot;delicious&quot;&gt;
&lt;li&gt;
&lt;div class=&quot;delicious-link&quot;&gt;&lt;a href=&quot;http://photobatch.stani.be/&quot;&gt;Phatch - Photo Batch Processor&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;delicious-extended&quot;&gt;Convenient looking tool to easily do stuff to a collection of images.&lt;/div&gt;
&lt;div class=&quot;delicious-tags&quot;&gt;(tags: &lt;a href=&quot;http://del.icio.us/tazzzzz/freeware&quot;&gt;freeware&lt;/a&gt; &lt;a href=&quot;http://del.icio.us/tazzzzz/OpenSource&quot;&gt;OpenSource&lt;/a&gt; &lt;a href=&quot;http://del.icio.us/tazzzzz/photography&quot;&gt;photography&lt;/a&gt; &lt;a href=&quot;http://del.icio.us/tazzzzz/photo&quot;&gt;photo&lt;/a&gt; &lt;a href=&quot;http://del.icio.us/tazzzzz/graphics&quot;&gt;graphics&lt;/a&gt; &lt;a href=&quot;http://del.icio.us/tazzzzz/images&quot;&gt;images&lt;/a&gt;)&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://sharethis.com/item?&amp;amp;wp=2.5.1&amp;amp;publisher=4c75e961-1ece-4620-a912-84dd6eb72e2f&amp;amp;title=links+for+2008-07-12&amp;amp;url=http%3A%2F%2Fwww.blueskyonmars.com%2F2008%2F07%2F12%2Flinks-for-2008-07-12%2F&quot;&gt;ShareThis&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2008-07-12T09:32:29+00:00</dc:date>
</item>

</rdf:RDF>
